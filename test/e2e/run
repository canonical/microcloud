#!/bin/bash
set -eu
set -o pipefail

REMOTE="${REMOTE:-${1:-""}}"
DESTROY="${DESTROY:-prompt}"
EVACUATION_COUNTS="${EVACUATION_COUNTS:-1}"

remoteAccessible() {
    lxc info "${REMOTE}:" >/dev/null 2>&1
}

init() {
    if ! command -v lxc >/dev/null; then
        echo "Missing command: lxc" >&2
        echo "Please install the LXD snap: snap install lxd" >&2
        exit 1
    fi

    if [ -z "${REMOTE}" ]; then
        echo "Please set the REMOTE environment variable to the name of the remote LXD server" >&2
        exit 1
    fi

    if [ "${REMOTE}" = "local" ]; then
        echo "This script is not meant to be run on the local LXD server" >&2
        exit 1
    fi

    if ! remoteAccessible; then
        echo "The ${REMOTE}: remote is not usable." >&2
        echo "Please see https://documentation.ubuntu.com/lxd/stable-5.21/howto/server_expose/#authenticate-with-the-lxd-server" >&2
        exit 1
    fi

    if [ "$(clusterMembers ONLINE | wc -l)" != "$(clusterMembers ALL | wc -l)" ]; then
        echo "Not all cluster members are online, aborting" >&2
        exit 1
    fi

    if ! command -v terraform >/dev/null; then
        echo "Missing command: terraform" >&2
        exit 1
    fi

    if ! terraform validate -no-tests >/dev/null 2>&1; then
        echo "Please ensure Terraform is initialized (hint: terraform init)" >&2
        exit 1
    fi

    # Show overrides
    if [ -s ./terraform.tfvars ]; then
        echo "Using overrides from terraform.tfvars:"
        echo "--------------------------------------"
        cat ./terraform.tfvars
        echo "--------------------------------------"
        echo
    fi
}

retry() {
    local cmd="$*"
    local i
    for i in 1 2 3; do
        ${cmd} && return 0
        retry="$((i*5))"
        echo "Retrying in ${retry} seconds... (${i}/3)"
        sleep "${retry}"
    done
    return 1
}

apply() {
    echo "terraform apply"

    # retry to work around the following issues with cluster image downloads:
    # XXX: https://github.com/canonical/lxd/issues/11636
    # a) multiple cluster members trying to figure which image fingerprint to download:
    # Failed creating instance from image: Error inserting volume "876fac034595ac77ccfd4dc023bd2667fe5d4b4226dfc38cd8109aa215783998" for project "default" in pool "remote" of type "images" into database "UNIQUE constraint failed: index
    # 'storage_volumes_unique_storage_pool_id_node_id_project_id_name_type'"

    # XXX: https://github.com/canonical/lxd/issues/15315
    # b) missing parent image (failed turning the tarball/squashfs into an image volume+snapshot):
    # Failed creating instance from image: Failed to run: rbd --id admin --cluster ceph --image-feature layering --image-feature striping --image-feature exclusive-lock --image-feature object-map --image-feature fast-diff --image-feature deep-flatten clone
    # lxd_remote/image_876fac034595ac77ccfd4dc023bd2667fe5d4b4226dfc38cd8109aa215783998_ext4@readonly lxd_remote/container_e2e-testing_c01: exit status 2 (2025-04-01T14:38:07.671+0000 7f8284b55640 -1 librbd::image::RefreshRequest: failed to locate snapshot:
    # readonly
    # 2025-04-01T14:38:07.671+0000 7f8284b55640 -1 librbd::image::OpenRequest: failed to find snapshot readonly
    # 2025-04-01T14:38:07.671+0000 7f826bfff640 -1 librbd::image::CloneRequest: 0x55b8434ed7c0 handle_open_parent: failed to open parent image: (2) No such file or directory
    # rbd: clone error: (2) No such file or directory)
    retry terraform apply -auto-approve -var "remote=${REMOTE}"
}

destroy() {
    echo "terraform destroy"
    if [ "${DESTROY}" = "prompt" ]; then
        terraform destroy -var "remote=${REMOTE}"
    elif [ "${DESTROY}" = "yes" ]; then
        terraform destroy -auto-approve -var "remote=${REMOTE}"
    elif [ "${DESTROY}" = "no" ] ; then
        echo "Skipping destroy"
    else
        echo "Invalid DESTROY value: ${DESTROY}" >&2
        exit 1
    fi
}

setup() {
    echo "Setting up e2e environment on ${REMOTE}"
    apply

    echo "Setup done"
}

instanceList() {
    lxc list --project e2e-testing -f csv -c n "${REMOTE}:"
}

clusterMembers() {
    local state="${1}"
    [ "${state}" = "ALL" ] && state=".*"
    # XXX: cannot use the column number for the member state as if multiple
    # roles are provided, the column number will change
    lxc cluster list --project e2e-testing -f csv "${REMOTE}:" | awk -F, "/,${state},/ {print \$1}"
}

randomPick() {
    local count="${1}"
    shift
    local list="$*"

    echo "${list}" | sort -R | head -n "${count}"
}

getIPv4() {
    local instance="${1}"
    lxc list --project e2e-testing -f csv -c 4 "${REMOTE}:" name="${instance}" | cut -d" " -f1
}

checkConnectivity() {
    local src="${1}"
    local dst="${2}"
    local dstIPv4
    dstIPv4="$(getIPv4 "${dst}")"

    echo -n " ● ${src} => ${dst} (${dstIPv4}):"
    # Using bash /dev/tcp to check for connectivity as it is available in every Ubuntu images even the minimal ones.
    if lxc exec --project e2e-testing "${REMOTE}:${src}" -- bash -c "grep -qm1 ^SSH- < /dev/tcp/${dstIPv4}/22"; then
        echo " ✅"
    else
        echo " ❌"
        exit 1
    fi
}

connectivity() {
    local instances instance src dst
    instances="$(instanceList)"

    echo "Connectivity check:"
    for src in $(randomPick 3 "${instances}"); do
        for dst in $(randomPick 3 "${instances}"); do
            [ "${src}" = "${dst}" ] && continue

            checkConnectivity "${src}" "${dst}"
        done
    done
    echo "DONE"
}

evacuation() {
    local member

    for member in $(clusterMembers ONLINE); do
        echo "Evacuating ${member}"
        lxc cluster evacuate --project e2e-testing --force "${REMOTE}:${member}"

        echo "Waiting for ${member} to be rebooted"
        if [ -x "./reboot" ]; then
            ./reboot "${REMOTE}" "${member}"
        else
            echo "Please reboot ${member} and wait for it to come back online."
            echo "Once online, run the following on ${member} to confirm readiness:"
            echo " sudo lxd waitready"
            echo
            read -rp "Press enter to continue with the evacuation test"
        fi

        lxc cluster restore --project e2e-testing --force "${REMOTE}:${member}"
    done

    echo -n "Allow time for stopped instances to start back again "
    for _ in $(seq 20); do
        echo -n "."
        sleep 1
    done
    echo " DONE"
}

init
setup

SUCCESFUL_EVACUATIONS=0
connectivity
for i in $(seq "${EVACUATION_COUNTS}"); do
    echo "Evacuation test (${i}/${EVACUATION_COUNTS})"
    evacuation
    connectivity
    SUCCESFUL_EVACUATIONS=$((SUCCESFUL_EVACUATIONS + 1))
done

if [ "${EVACUATION_COUNTS}" = "0" ]; then
    echo "Evacuation test skipped"
elif [ "${SUCCESFUL_EVACUATIONS}" = "${EVACUATION_COUNTS}" ]; then
    echo "Ecuation test passed after ${SUCCESFUL_EVACUATIONS} successful evacuations"
else
    echo "Evacuation test failed: ${SUCCESFUL_EVACUATIONS} successful evacuations out of the ${EVACUATION_COUNTS} expected"
    exit 1
fi

destroy
echo "Done"
