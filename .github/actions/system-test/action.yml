name: System test
inputs:
  setup_testbed:
    description: 'Set up the testbed infrastructure (VMs, networks, etc.)'
    required: false
    default: 'true'
  setup_terraform:
    description: 'Set up Terraform for tests that require it'
    required: false
    default: 'false'
  collect_coverage:
    description: 'Whether to collect Go coverage data for this test'
    required: false
    default: 'true'
runs:
  using: composite
  steps:
    - name: Tune disk performance
      uses: canonical/lxd/.github/actions/tune-disk-performance@main

    - name: Reclaim some space
      uses: canonical/lxd/.github/actions/reclaim-disk-space@main

    - name: Reclaim some memory
      uses: canonical/lxd/.github/actions/reclaim-memory@main

    - name: Disable Docker (GitHub runners)
      if: ${{ runner.environment == 'github-hosted' }}
      uses: canonical/lxd/.github/actions/disable-docker@main

    - name: "Disable br_netfilter"
      shell: bash
      run: |
        # When br_netfilter is enabled, the multicast traffic that passes the native LXD bridge
        # will get masqueraded too which breaks the multicast discovery.
        if lsmod | grep -qw ^br_netfilter; then
          sudo modprobe -r br_netfilter
        fi

    - name: Checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

    - name: Install Go
      uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
      with:
        go-version-file: 'go.mod'

    - name: Download system test dependencies
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        name: system-test-deps
        merge-multiple: true
        # Pick the right home path of the runner user.
        # The GitHub runners use /home/runner and the Canonical ones use /home/ubuntu.
        # The path intput supports expansion.
        path: ~/go/bin

    - name: Make GOCOVERDIR
      shell: bash
      run: mkdir -p "${GOCOVERDIR}"
      if: env.GOCOVERDIR != ''

    - name: Sideload debug binaries
      shell: bash
      run: |
        set -eux

        # Binaries to sideload
        export MICROCLOUD_DEBUG_PATH=~/go/bin/microcloud
        export MICROCLOUDD_DEBUG_PATH=~/go/bin/microcloudd

        echo "MICROCLOUD_DEBUG_PATH=${MICROCLOUD_DEBUG_PATH}"   >> "${GITHUB_ENV}"
        echo "MICROCLOUDD_DEBUG_PATH=${MICROCLOUDD_DEBUG_PATH}" >> "${GITHUB_ENV}"

    - name: Strip debug binaries
      if: env.GOCOVERDIR == ''
      shell: bash
      run: |
        set -eux
        strip -s "${MICROCLOUD_DEBUG_PATH}" "${MICROCLOUDD_DEBUG_PATH}"

    - name: "Free up the ephemeral disk"
      shell: bash
      run: |
        set -eux

        if ! mountpoint --quiet /mnt; then
          echo "INFO: no ephemeral disk mounted on /mnt"
          mount
          exit 0
        fi

        # If the rootfs and the ephemeral part are on the same physical disk, giving the whole
        # disk to microceph would wipe our rootfs. Since it is pretty rare for GitHub Action
        # runners to have a single disk, we immediately bail rather than trying to gracefully
        # handle it. Once snapd releases with https://github.com/snapcore/snapd/pull/13150,
        # we will be able to stop worrying about that special case.
        if [ "$(stat -c '%d' /)" = "$(stat -c '%d' /mnt)" ]; then
          echo "FAIL: rootfs and ephemeral part on the same disk, aborting"
          lsblk
          blkid
          sudo fdisk -l
          exit 1
        fi

        # Free-up the ephemeral disk to use it as storage device for LXD.
        sudo swapoff /mnt/swapfile
        ephemeral_disk="$(findmnt --noheadings --output SOURCE --target /mnt | sed 's/[0-9]\+$//')"
        sudo umount /mnt
        sudo wipefs -a "${ephemeral_disk}"
        export TEST_STORAGE_SOURCE="${ephemeral_disk}"

        echo "TEST_STORAGE_SOURCE=${TEST_STORAGE_SOURCE}" >> "${GITHUB_ENV}"

    - name: "Setup host LXD"
      shell: bash
      run: |
        set -eux
        sudo snap install lxd --channel 5.21/edge
        sudo lxd init --auto --storage-backend=zfs

        # Save cached images into the (compressed) zpool
        sudo lxc storage volume create default images
        sudo lxc config set storage.images_volume=default/images

    - name: "Prepare for system tests"
      shell: bash
      run: |
        set -eux
        chmod +x ~

        export BASE_OS="${{ matrix.os }}"
        export LXD_SNAP_CHANNEL="${{ matrix.lxd }}"
        export MICROCEPH_SNAP_CHANNEL="${{ matrix.microceph }}"
        export MICROOVN_SNAP_CHANNEL="${{ matrix.microovn }}"
        export MICROCLOUD_SNAP_CHANNEL="${{ matrix.microcloud }}"

        cd test
        if [ "${{ inputs.setup_testbed }}" = "false" ]; then
          echo "Skipping testbed setup"
        else
          sudo --preserve-env=GOCOVERDIR,DEBUG,GITHUB_ACTIONS,MICROCLOUD_DEBUG_PATH,MICROCLOUDD_DEBUG_PATH,SKIP_VM_LAUNCH,SNAPSHOT_RESTORE,TEST_STORAGE_SOURCE,TESTBED_READY,BASE_OS,LXD_SNAP_CHANNEL,MICROCEPH_SNAP_CHANNEL,MICROOVN_SNAP_CHANNEL,MICROCLOUD_SNAP_CHANNEL ./main.sh setup
        fi
        echo "TESTBED_READY=1" >> "${GITHUB_ENV}"
        echo "BASE_OS=${BASE_OS}" >> "${GITHUB_ENV}"
        echo "LXD_SNAP_CHANNEL=${LXD_SNAP_CHANNEL}" >> "${GITHUB_ENV}"
        echo "MICROCEPH_SNAP_CHANNEL=${MICROCEPH_SNAP_CHANNEL}" >> "${GITHUB_ENV}"
        echo "MICROOVN_SNAP_CHANNEL=${MICROOVN_SNAP_CHANNEL}" >> "${GITHUB_ENV}"
        echo "MICROCLOUD_SNAP_CHANNEL=${MICROCLOUD_SNAP_CHANNEL}" >> "${GITHUB_ENV}"

    - name: Setup Terraform
      if: ${{ inputs.setup_terraform == 'true' }}
      uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
      with:
        terraform_wrapper: false

    - name: "Run system tests (${{ matrix.suite }})"
      shell: bash
      run: |
        set -eux
        chmod +x ~
        
        # Handle coverage collection based on input
        if [ "${{ inputs.collect_coverage }}" = "false" ]; then
          echo "Coverage collection disabled for this test"
          export GOCOVERDIR=''
        fi
        
        cd test
        sudo --preserve-env=GOCOVERDIR,DEBUG,GITHUB_ACTIONS,MICROCLOUD_DEBUG_PATH,MICROCLOUDD_DEBUG_PATH,SKIP_VM_LAUNCH,SNAPSHOT_RESTORE,TEST_STORAGE_SOURCE,TESTBED_READY,BASE_OS,LXD_SNAP_CHANNEL,MICROCEPH_SNAP_CHANNEL,MICROOVN_SNAP_CHANNEL,MICROCLOUD_SNAP_CHANNEL ./main.sh ${{ matrix.suite }}
        echo "TIMESTAMP=$(date +%Y%m%d_%H%M%S_%N)" >> "${GITHUB_ENV}"

    - name: Upload coverage data
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: coverage-${{ matrix.suite }}-${{ env.TIMESTAMP }}
        path: ${{ env.GOCOVERDIR }}
      if: env.GOCOVERDIR != ''
